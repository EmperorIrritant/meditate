#!/bin/bash

#set -x

trap display_time INT

function display_time() {
  ENDTIME=$(date +%s)
  SESSIONTIME=$((ENDTIME-STARTTIME))
  tput cub 2 #To clear the "^C" characters printed on pressing Ctrl+C
  echo "Full breath cycles: $COUNT"
  echo "Meditation Time: $(($SESSIONTIME / 3600)) hours, $((($SESSIONTIME / 60) % 60)) minutes and $(($SESSIONTIME % 60)) seconds"
  update_db "$STARTTIME" "$SESSIONTIME" $COUNT "$PATTERNNAME" "$PATTERN"
  exit 0
}

usage="Usage: ./$(basename $0) [OPTIONS]

Options:
 -h                     this help
 -p <player>            vlc, mpv, ffplay, termux
 -t <seconds>           set meditation timer (default: infinite) (NOT IMPLEMENTED YET)
 -c <pattern>           breath pattern as a in-hold-out-hold sequence (e.g. 7070, 4444, 4662, 10_5_10_5)
                        or as a in-out sequence (e.g. 77, 44, 46, 10_5)
 -d <file>              sqlite db file (default: "$DEFAULTDB" in the same directory)
 -s [file]              show session details in the database"

illegal_option_error_msg() { echo "Illegal usage. Try $(basename $0) -h for usage."; }
no_player_error_msg() { echo "No Player selected. $(illegal_option_error_msg)"; }
bold_text() { tput bold; echo -n "$1"; tput sgr0; }
dbfile_not_found_error_msg() { echo "DB file $(bold_text $1) not found."; }
dbfile_not_found_optiond_error_msg() { echo "$(dbfile_not_found_error_msg $1). Default file $(bold_text $DEFAULTDB) will be used."; }
schema_diff_error_msg() { echo "The $1 file has a different schema. If it's the default db, then it will be renamed and a new file will be created."; }
schema_cannot_check_msg() { echo "Not checking schema, as sqldiff is not available on Termux"; }
db_update_success_msg() { echo "DB updated."; }
invalid_sequence_error_msg() { echo "Invalid sequence pattern. Try with 46 or 4444 or 10_5, or see help for usage."; }

setup_db() {
  CREATETABLESTMT='CREATE TABLE IF NOT EXISTS "meditated" (
	  "Session"	INTEGER PRIMARY KEY AUTOINCREMENT,
	  "StartTime"	TEXT NOT NULL,
    "StartTimeSeconds" REAL NOT NULL,
	  "Duration"	REAL NOT NULL,
	  "BreathCycles"	INTEGER NOT NULL,
	  "PatternName"	TEXT,
	  "Pattern"	TEXT NOT NULL
    )';
  sqlite3 "$1" "$CREATETABLESTMT";
}

update_db() {
  STARTTIMESECONDS="$1"
  SESSIONTIME="$2"
  STARTTIME=$(date --utc --date=@$STARTTIMESECONDS)
  COUNT="$3"
  PATTERNNAME="$4"
  PATTERN="$5"
  INSERTTBLSTMT='INSERT INTO "meditated" ("StartTime", "StartTimeSeconds", "Duration", "BreathCycles", "PatternName", "Pattern")
    VALUES ("'"$STARTTIME"'", '"$STARTTIMESECONDS"','"$SESSIONTIME"','"$COUNT"',"'"$PATTERNNAME"'","'"$PATTERN"'");'
  response=$(sqlite3 "$DBFILE" "$INSERTTBLSTMT" 2>&1);
  if [[ -z $response ]];
  then
    db_update_success_msg;
  else
    echo "Error: $response";
  fi
}

check_db_schema() {
  if [[ -n "$TERMUX" ]];
  then
    schema_cannot_check_msg
    return
  fi
  SCHEMATESTDB="schematest.db"
  setup_db "$SCHEMATESTDB"
  SQLDIFF=$(sqldiff -schema "$1" "$SCHEMATESTDB")
  rm "$SCHEMATESTDB"
  if [[ -n "$SQLDIFF" ]];
  then
    schema_diff_error_msg "$1"
    return -1
  fi
  return 0
}

display_db() {
  QUERYSTMT="SELECT Session, StartTime, Duration, BreathCycles, Pattern from meditated;"
  DBFILE="$1";
  sqlite3 -header -column "$DBFILE" "$QUERYSTMT";
}

INHALETIME=6
INHALEHOLDTIME=4
EXHALETIME=7
EXHALEHOLDTIME=3

function parse_options() {
  while getopts ":hp:t:d:s:c:" opt; do
    case "${opt}" in
      h)
        echo "$usage"
        exit 0
        ;;
      p)
        PLAYEROPTION=("$OPTARG")
        if [[ "${#PLAYEROPTION[@]}" -gt 1 ]];
        then
          PLAYER="$OPTARG"
        else
          case "$OPTARG" in
            # TODO: Check if selected players exist
            vlc)
              PLAYER="vlc --intf dummy --no-loop --play-and-exit --quiet --no-version"
              ;;
            mpv)
              PLAYER="mpv --no-terminal"
              ;;
            ffplay)
              PLAYER="ffplay -nodisp -autoexit"
              ;;
            termux)
              PLAYER="termux-media-player play"
              TERMUX=1
              ;;
            *)
              illegal_option_error_msg
              exit -1
          esac
        fi
        ;;
      t)
        # Not implemented yet
        TIMER="$OPTARG"
        ;;
      d)
        DBFILE="${OPTARG}"
        if [[ ! -f "$DBFILE" ]];
        then
          dbfile_not_found_optiond_error_msg "$DBFILE"
          if [[ ! -f "$DEFAULTDB" ]];
          then
            setup_db "$DEFAULTDB"
            file="$DEFAULTDB"
          else
            check_db_schema "$DEFAULTDB"
            mv "$DEFAULTDB" "$DEFAULTDB.badschema"
            setup_db "$DEFAULTDB"
          fi
        else
          check_db_schema "$DBFILE"
          exit -1;
        fi
        ;;
      s)
        if [[ -f "$OPTARG" ]];
        then
          DBFILE="$OPTARG"
          display_db "$DBFILE"
        else
          dbfile_not_found_error_msg "$OPTARG"
          exit -1
        fi
        exit 0;
        ;;
      c)
        if [[ "$OPTARG" == *"_"* ]];
        then
          SEQ=(${OPTARG//_/ })
          if [[ "${#SEQ[@]}" -eq 4 ]];
          then
            INHALETIME="${SEQ[0]}"
            INHALEHOLDTIME="${SEQ[1]}"
            EXHALETIME="${SEQ[2]}"
            EXHALEHOLDTIME="${SEQ[3]}"
          elif [[ "${#SEQ[@]}" -eq 2 ]];
          then
            INHALETIME="${SEQ[0]}"
            INHALEHOLDTIME=0
            EXHALETIME="${SEQ[1]}"
            EXHALEHOLDTIME=0
          else
            invalid_sequence_error_msg
            exit -1
          fi
        elif [[ ${#OPTARG} -eq 4 ]];
        then
          INHALETIME="${OPTARG:0:1}"
          INHALEHOLDTIME="${OPTARG:1:1}"
          EXHALETIME="${OPTARG:2:1}"
          EXHALEHOLDTIME="${OPTARG:3:1}"
        elif [[ "${#OPTARG}" -eq 2 ]];
        then
          INHALETIME="${OPTARG:0:1}"
          INHALEHOLDTIME=0
          EXHALETIME="${OPTARG:1:1}"
          EXHALEHOLDTIME=0
        else
          invalid_sequence_error_msg
          exit -1
        fi

        if [[ "$INHALETIME" -eq 0 || "$EXHALETIME" -eq 0 ]];
        then
          invalid_sequence_error_msg
          exit -1
        fi
        ;;
      :)
        if [[ "$OPTARG" == "s" ]];
        then
          DBFILE="$DEFAULTDB"
          display_db "$DBFILE"
        fi
        exit 0;
        ;;
      ?)
        illegal_option_error_msg
        exit -1
        ;;
    esac
  done
}

function check_on_db() {
  if [[ ! -f "$DBFILE" ]];
  then
    setup_db "$DEFAULTDB";
  else
    if [[ $(check_db_schema "$DBFILE") -ne 0 ]];
    then
      mv "$DBFILE" "$DBFILE.badschema.$(date +%Y-%m-%d_%H-%M-%S)"
      setup_db "$DBFILE"
    fi
  fi
}

function options_or_no_options() {
  DBFILE=$DEFAULTDB
  if [[ "$#" -ge 0 ]];
  then
    parse_options "$@"
    if [[ -z "$PLAYER" ]];
    then
      no_player_error_msg
      exit -1;
    fi;
    #if [[ -z "$TIMER" ]];
    #then
    #  if [ ! -t 0 ] && [ ! -t 1 ]; then
    #
    #  fi
    #fi
  fi;
}

function breathe() {
  BREATHE="$1";
  BREATHETIME="$2";
  $PLAYER $BREATHE >&- 2>&-;
  sleep "$BREATHETIME";
}

function hold() {
  HOLD="$1"
  HOLDTIME="$2"
  if [[ "$HOLDTIME" -ge 1 ]];
  then
    $PLAYER $HOLD >&- 2>&-;
    sleep "$HOLDTIME";
  fi
}

function meditate() {
  COUNT=0;
  STARTTIME=$(date +%s);
  while true;
  do
    breathe $INHALE $INHALETIME;
    hold $HOLD $INHALEHOLDTIME;
    breathe $EXHALE $EXHALETIME;
    hold $HOLD $EXHALEHOLDTIME;
    COUNT=$((COUNT+1))
  done;
}

DEFAULTDB="meditate.db"

options_or_no_options "$@"

FPATH=.
INHALE="$FPATH"/Inhale.mp3
HOLD="$FPATH"/Hold.mp3
EXHALE="$FPATH"/Exhale.mp3

PATTERNNAME="custom"
PATTERN="$INHALETIME $INHALEHOLDTIME $EXHALETIME $EXHALEHOLDTIME"

check_on_db
meditate
